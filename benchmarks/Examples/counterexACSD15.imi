(************************************************************
 *                         IMITATOR
 *
 * Counter-example given by a reviewer of ACSD 2015
 *
 * Author          : "Reviewer 1" (input by Étienne André)
 *
 * Created         : 2015/03/26
 * Last modified   : 2020/08/14
 *
 * IMITATOR version: 3
 ************************************************************)

var 	x, y
		: clock;

	p
		: parameter;


(*
	l1 -( x == 1, x := 0 )-> l2
	l2 -( y == 1, y := 0 )-> l3
	l3 -( y <= p, y := 0 )-> l1
	l1 -( y == 0 /\ x >= 1 )-> l4
*)


(************************************************************)
  automaton pta
(************************************************************)
synclabs: ;

loc l1: invariant True
	when x = 1 do {x := 0} goto l2;
	when y = 0 & x >= 1 goto l4;

loc l2: invariant True
	when y = 1 do {y := 0} goto l3;

loc l3: invariant True
	when y <= p do {y := 0} goto l1;

loc l4: invariant True

end (*a*)



(************************************************************)
(* Initial state *)
(************************************************************)

init := True
	(*------------------------------------------------------------
	   INITIAL LOCATION
	  ------------------------------------------------------------*)
	& loc[pta] = l1

	(*------------------------------------------------------------
	   INITIAL CLOCKS
	  ------------------------------------------------------------*)
	& x = 0
	& y = 0

	(*------------------------------------------------------------
	   PARAMETER CONSTRAINTS
	  ------------------------------------------------------------*)
	& p >= 0
	& p <= 1
;

end
