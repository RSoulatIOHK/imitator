(************************************************************
 *                                IMITATOR MODEL
 *
 * Title            : Pure TA-like (timed) specification
 * Description      : Pure TA-like (timed) specification with a single impossible run: only the valuation x=4 from l1 to lT is forbidden. Version with non-1 flows, and other locations.
 * Correctness      : 
 * Scalable         : no
 * Generated        : no
 * Categories       : toy
 * Source           : Own work
 * bibkey           : 
 * Author           : Étienne André
 * Modeling         : Étienne André
 * Input by         : Étienne André
 * License          : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created          : 2022/01/10
 * Last modified    : 2022/03/02
 * Model version    : 0.1
 *
 * IMITATOR version : 3.3-alpha
 ************************************************************)

var

(* Clocks *)
 	x, y, z,
 	global_time,
		: clock;


(************************************************************)
  automaton specification
(************************************************************)
synclabs: a1, a2;

loc l1: invariant x <= 4 flow{x' = 1, y' = -0.25} stop{z}
	when x < 4 sync a1 goto l2;

loc l2: invariant True flow{x' = 1, y' = -0.25} stop{z}
	when True sync a2 goto l3;

loc l3: invariant True flow{x' = 1, y' = -0.25} stop{z}
	when True sync a1 goto lT;

loc lT: invariant True

end (* pta *)

(************************************************************)
(* Initial state *)
(************************************************************)

init := {
	
    discrete =
		(*------------------------------------------------------------*)
		(* Initial location *)
		(*------------------------------------------------------------*)
		loc[specification] := l1,

    ;

    continuous =        
		(*------------------------------------------------------------*)
		(* Initial clock and signal constraints *)
		(*------------------------------------------------------------*)
		& global_time	= 0
		& x				= 0
		& y				= 1
		& z				= 2

		(*------------------------------------------------------------*)
		(* Parameter constraints *)
		(*------------------------------------------------------------*)
(* 		& p >= 0 *)
	;
}


(************************************************************)
(* The end *)
(************************************************************)
end
