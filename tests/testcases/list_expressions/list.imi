(************************************************************
 *                                IMITATOR MODEL
 *
 * Title            : Test general behavior of list expressions
 * Description      : Test general behavior of lists, list functions, list accesses
 * Correctness      : N/A
 * Scalable         : no
 * Generated        : no
 * Categories       : TBD
 * Source           : Own work
 * bibkey           :
 * Author           : B.L
 * Modeling         : B.L
 * Input by         : B.L
 * License          : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created          : 2021/01/20
 * Last modified    : 2021/01/20
 * Model version    : 1.0
 *
 * IMITATOR version : 3.3
 ************************************************************)
var

    k = 1 : constant;

    rational_list : rational list;
    int_list : int list;
    bool_list : bool list;
    binary_word_list : binary(4) list;
    array_list : rational array(2) list;
    list_list : rational list list;
    list_array : rational list array(2);
    list_of_stack : int stack list;
    list_of_queue : int queue list;

(************************************************************)
 automaton pta
(************************************************************)

loc l1: invariant True
	when

    (* Test equality *)
    & list([1,2]) = list([1,2])

    (* Test list accesses *)
    & rational_list[0] = 1
    & int_list[0] = 1
    & bool_list[0] = True
    & binary_word_list[0] = 0b1100
    & array_list[0] = [1, 2]
    & list_list[0] = list([1])
    & list_array[0] = list([1])
    & list_array[1] = list([2])

    (* Test simple function calls *)
    & list_cons(1, list([2, 3])) = list([1, 2, 3])
    & not(list_is_empty(rational_list))
    & list_hd(list([3, 4])) = 3
    & list_length(list([1, 1, 1])) = 3
    & list_mem(2, list([8, 6, 2]))
    & list_rev(list([1, 2, 3])) = list([3, 2, 1])
    & list_tl(list([1, 2, 3])) = list([2, 3])
    & list_hd(list_of_stack) = stack()
    & list_hd(list_of_queue) = queue()

    (* Test complex function calls *)
    & list_hd(list([list_mem([0b0], list([[0b0], [0b0]]))]))  = True
    & list_hd(list([list([0b0])])) = list([0b0])
    & list_tl(list([1, 2, 3])) = list([2, 3])
    & list_tl(list([[1], [2], [3]])) = list([[2], [3]])

    (* ----------------------------------- *)
    (* Check weak typed list *)

    & list([]) = list([])
    & list_length(list([])) = 0
    & not(list_mem(1, list([])))

    (* ----------------------------------- *)
    (* ----------------------------------- *)

  do {
    int_list := list_cons(2, int_list)
  }
  goto lend;

accepting loc lend: invariant int_list = list([2,1])
 end (* pta *)
(************************************************************)


(************************************************************)
(* Initial state *)
(************************************************************)

init := {

    discrete =
        loc[pta] := l1,

        rational_list := list([1]),
        int_list := list([1]),
        bool_list := list([True]),
        binary_word_list := list([0b1100]),
        array_list := list([[1,2]]),
        list_list := list([list([1])]),
        list_array := [list([1]), list([2])],
        list_of_stack := list([stack()]),
        list_of_queue := list([queue()])
    ;
    continuous =
        & True
    ;

}


(************************************************************)
(* The end *)
(************************************************************)
end
