(************************************************************
 *                                IMITATOR MODEL
 *
 * Title            : Test some of the new possibilities of syntax offered by v3.1
 * Description      : Test some of the new possibilities of syntax offered by v3.1. Purely syntactic check.
 * Correctness      : N/A
 * Scalable         : no
 * Generated        : no
 * Categories       : TBD
 * Source           : Own work
 * bibkey           : 
 * Author           : Étienne André
 * Modeling         : Étienne André
 * Input by         : Étienne André
 * License          : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created          : 2021/06/02
 * Last modified    : 2021/07/12
 * Model version    : 0.1
 *
 * IMITATOR version : 3.1
 ************************************************************)

var

(* Clocks *)
 	x,
		: clock;

(* Discrete *)
	b,
		: bool;
	i,
		: int;
	r,
		: rational;

(* Constants *)
	c3 = 1 + 3*9/2,
		: constant;

	c1 = True,
	c2 = True & not (False)
		: bool;
	
	ci1 = 0: int;

(* Parameters *)
	p,
		: parameter;



(************************************************************)
  automaton pta
(************************************************************)
synclabs: a;

loc l1: invariant x <= p & pow(i, 3) <= 10 & rational_of_int(i) <> 0
	when c3 <> c3 & not(c1) & b & c2 & x = p & x > r & rational_of_int(i) = r
	sync a
	do {
		x := p/2,
		i := i+1 + ci1,
		r := r*r + 1/r + r/2 + rational_of_int(0) / (rational_of_int(ci1)) + 1/(r + c3),
		r := pow(rational_of_int(i) + r + c3 + 2, i + (4 + 2)),
		i := pow(i+1, 2 i / 2 + 4)
	} goto l2;

loc l2: invariant i <> ci1

end (* pta *)



(************************************************************)
(* Initial state *)
(************************************************************)

init := {
	
    discrete =
		(*------------------------------------------------------------*)
		(* Initial location *)
		(*------------------------------------------------------------*)
		loc[pta] := l1,

		(*------------------------------------------------------------*)
		(* Initial discrete variables assignments *)
		(*------------------------------------------------------------*)
		r := 1/2 + 1/(c3 + 1) - rational_of_int(1) + 50/50,
		i := 0 + ci1,
		b := c2 & not(c1) | True,

    ;

    continuous =        
		(*------------------------------------------------------------*)
		(* Initial clock constraints *)
		(*------------------------------------------------------------*)
		& x = 0

		(*------------------------------------------------------------*)
		(* Parameter constraints *)
		(*------------------------------------------------------------*)
		& p >= r + x
	;
}


(************************************************************)
(* The end *)
(************************************************************)
end
