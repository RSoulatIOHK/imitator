(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Empty template of a case study
 *
 * Description     : TODO
 * Correctness     : TODO
 * Source          : TODO
 * Author          : ME
 * Input by        : ME
 *
 * Created         : 1970/01/01
 * Last modified   : 1970/01/01
 *
 * IMITATOR version: 2.7-beta3
 ************************************************************)

var 
(* Clocks *)
	c1, 
	c2,
	c3,
	c4,
	c5,
		:clock;
	
(* Discrete *)
	V1,
	V2,
	count
		: discrete;

(* Constants *)
	(* T = 16 *)
	pid1 = 1,
	pid2 = 2,
	pid3 = 3,
	pid4 = 4,
	pid5 = 5,
		: constant;

(* Parameters *)
	T
		: parameter;



(************************************************************)
automaton proc1
(************************************************************)
(* synclabs : ; *)


loc L1: invariant True
	when V1 = -1 do {c1 := 0} goto L2;

loc L2: invariant c1 <= T
	when c1 <= T do {V1 := pid1, c1 := 0} goto L3;

loc L3: invariant True
	when V1 < pid1 && V1 > pid1 do {c1 := 0} goto L1; (* V1 != pid1 *)
	when V1 = pid1 && c1 > T do {c1 := 0} goto L4;

accepting loc L4: invariant True
	when V2 = 1 do {c1 := 0} goto L5; (*V2 = True*)
	when V2 = 0 do {} goto L1; (*V2 = False*)
	when True goto L4;

loc L5: invariant c1 <= T
	when c1 <= T do {c1 := 0, V2 := 1} goto L6; (*V2 = True*)

loc L6: invariant True
	when V1 = pid1 do {count := count + 1} goto CS7;
	when V1 < pid1 && V1 > pid1 do {} goto L1;

loc CS7: invariant True
	when True do {count := count - 1, c1 := 0} goto L8;

loc L8: invariant c1 <= T
	when c1 <= T do {V2 := 0, c1 := 0} goto L9;

loc L9: invariant c1 <= T
	when c1 <= T do {V1 := -1} goto L1;
	

end




(************************************************************)
automaton proc2
(************************************************************)
(* synclabs : ; *)


loc L1: invariant True
	when V1 = -1 do {c2 := 0} goto L2;

loc L2: invariant c2 <= T
	when c2 <= T do {V1 := pid1, c2 := 0} goto L3;

loc L3: invariant True
	when V1 < pid1 && V1 > pid1 do {c2 := 0} goto L1; (* V1 != pid1 *)
	when V1 = pid1 && c2 > T do {c2 := 0} goto L4;

accepting loc L4: invariant True
	when V2 = 1 do {c2 := 0} goto L5; (*V2 = True*)
	when V2 = 0 do {} goto L1; (*V2 = False*)

loc L5: invariant c2 <= T
	when c2 <= T do {c2 := 0, V2 := 1} goto L6; (*V2 = True*)

loc L6: invariant True
	when V1 = pid1 do {count := count + 1} goto CS7;
	when V1 < pid1 && V1 > pid1 do {} goto L1;

loc CS7: invariant True
	when True do {count := count - 1, c2 := 0} goto L8;

loc L8: invariant c2 <= T
	when c2 <= T do {V2 := 0, c2 := 0} goto L9;

loc L9: invariant c2 <= T
	when c2 <= T do {V1 := -1} goto L1;
	

end



(************************************************************)
automaton proc3
(************************************************************)
(* synclabs : ; *)


loc L1: invariant True
	when V1 = -1 do {c3 := 0} goto L2;

loc L2: invariant c3 <= T
	when c3 <= T do {V1 := pid3, c3 := 0} goto L3;

loc L3: invariant True
	when V1 < pid3 && V1 > pid3 do {c3 := 0} goto L1; (* V1 != pid3 *)
	when V1 = pid3 && c3 > T do {c3 := 0} goto L4;

accepting loc L4: invariant True
	when V2 = 1 do {c3 := 0} goto L5; (*V2 = True*)
	when V2 = 0 do {} goto L1; (*V2 = False*)

loc L5: invariant c3 <= T
	when c3 <= T do {c3 := 0, V2 := 1} goto L6; (*V2 = True*)

loc L6: invariant True
	when V1 = pid3 do {count := count + 1} goto CS7;
	when V1 < pid3 && V1 > pid3 do {} goto L1;

loc CS7: invariant True
	when True do {count := count - 1, c3 := 0} goto L8;

loc L8: invariant c3 <= T
	when c3 <= T do {V2 := 0, c3 := 0} goto L9;

loc L9: invariant c3 <= T
	when c3 <= T do {V1 := -1} goto L1;
	

end



(************************************************************)
automaton proc4
(************************************************************)
(* synclabs : ; *)


loc L1: invariant True
	when V1 = -1 do {c4 := 0} goto L2;

loc L2: invariant c4 <= T
	when c4 <= T do {V1 := pid4, c4 := 0} goto L3;

loc L3: invariant True
	when V1 < pid4 && V1 > pid4 do {c4 := 0} goto L1; (* V1 != pid4 *)
	when V1 = pid4 && c4 > T do {c4 := 0} goto L4;

accepting loc L4: invariant True
	when V2 = 1 do {c4 := 0} goto L5; (*V2 = True*)
	when V2 = 0 do {} goto L1; (*V2 = False*)

loc L5: invariant c4 <= T
	when c4 <= T do {c4 := 0, V2 := 1} goto L6; (*V2 = True*)

loc L6: invariant True
	when V1 = pid4 do {count := count + 1} goto CS7;
	when V1 < pid4 && V1 > pid4 do {} goto L1;

loc CS7: invariant True
	when True do {count := count - 1, c4 := 0} goto L8;

loc L8: invariant c4 <= T
	when c4 <= T do {V2 := 0, c4 := 0} goto L9;

loc L9: invariant c4 <= T
	when c4 <= T do {V1 := -1} goto L1;
	

end




(************************************************************)
automaton proc5
(************************************************************)
(* synclabs : ; *)


loc L1: invariant True
	when V1 = -1 do {c5 := 0} goto L2;

loc L2: invariant c5 <= T
	when c5 <= T do {V1 := pid5, c5 := 0} goto L3;

loc L3: invariant True
	when V1 < pid5 && V1 > pid5 do {c5 := 0} goto L1; (* V1 != pid5 *)
	when V1 = pid5 && c5 > T do {c5 := 0} goto L4;

accepting loc L4: invariant True
	when V2 = 1 do {c5 := 0} goto L5; (*V2 = True*)
	when V2 = 0 do {} goto L1; (*V2 = False*)

loc L5: invariant c5 <= T
	when c5 <= T do {c5 := 0, V2 := 1} goto L6; (*V2 = True*)

loc L6: invariant True
	when V1 = pid5 do {count := count + 1} goto CS7;
	when V1 < pid5 && V1 > pid5 do {} goto L1;

loc CS7: invariant True
	when True do {count := count - 1, c5 := 0} goto L8;

loc L8: invariant c5 <= T
	when c5 <= T do {V2 := 0, c5 := 0} goto L9;

loc L9: invariant c5 <= T
	when c5 <= T do {V1 := -1} goto L1;
	

end









(************************************************************)
(************************************************************)
(* ANALYSIS                                                 *)
(************************************************************)
(************************************************************)


   
init := True
	(*--------------------
	   Initial locations
	--------------------*)
	& loc[proc1] = L1
	& loc[proc2] = L1
	& loc[proc3] = L1
	& loc[proc4] = L1
	& loc[proc5] = L1

	
	(*--------------------
	   Clocks
	--------------------*)
	& c1 = 0
	& c2 = 0
	& c3 = 0
	& c4 = 0
	& c5 = 0

	
	(*--------------------
	   Discrete
	--------------------*)
	& V1 = -1
	& V2 = 0
	& count = 0

	(*--------------------
	   Parameters
	--------------------*)
	& T >= 0
;

end