(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Empty template of a case study
 *
 * Description     : TODO
 * Correctness     : TODO
 * Source          : TODO
 * Author          : ME
 * Input by        : ME, Laure Petrucci
 *
 * Created         : 1970/01/01
 * Last modified   : 2020/09/07
 *
 * IMITATOR version: 3.0
 ************************************************************)

var

(* Clocks *)
 	t, 
 	trt1, xa1, xb1, 
 	trt2, xa2, xb2,
 	trt3, xa3, xb3,
 	trt4, xa4, xb4
		: clock;

(* Discrete *)
	id 
		: discrete;
		
(* Constants *)
	max_id = 4,
	ttrt = 100 (*50x2*)
		: constant;

(* Parameters *)
	sa, td
		: parameter;




(************************************************************)
  automaton ring
(************************************************************)

synclabs: tt1, rt1, tt2, rt2, tt3, rt3, tt4, rt4; 

loc l0: invariant t <= td
	(* when t = td sync tt goto l0; *)
	when id = 1 & t = td sync tt1 goto l1;
	when id = 2 & t = td sync tt2 goto l1;
	when id = 3 & t = td sync tt3 goto l1;
	when id = 4 & t = td sync tt4 goto l1;

loc l1: invariant True
	(* when id > 0 & id < max_id sync rt do {t := 0, id := id +1 } goto l0; *)
	(* when id = max_id sync rt do {t := 0, id := 1 } goto l0; *)

	when id = 1 sync rt1 do {t := 0, id := id +1 } goto l0;
	when id = 2 sync rt2 do {t := 0, id := id +1 } goto l0;
	when id = 3 sync rt3 do {t := 0, id := id +1 } goto l0;
	when id = 4 sync rt4 do {t := 0, id := 1 } goto l0;
	
end (* ring *)




(************************************************************)
  automaton station1
(************************************************************)

synclabs: tt1, rt1; 

loc l0: invariant True
	(* when trt1 >= ttrt sync tt1 do {trt1 := 0, xb1 := 0} goto l1;
	when trt1 < ttrt sync tt1 do {trt1 := 0, xb1 := 0} goto l2; *)

	when trt1 >= ttrt sync tt1 do {xb1 := trt1, trt1 := 0} goto l1;
	when trt1 < ttrt sync tt1 do {xb1 := trt1, trt1 := 0} goto l2;

loc l1: invariant trt1 <= sa
	when trt1 = sa sync rt1 goto l4;
	
loc l2: invariant trt1 <= sa
	when trt1 = sa goto l3;
	
loc l3: invariant xa1 <= ttrt + sa
	when True sync rt1 goto l4;
	
loc l4: invariant True
	when trt1 >= ttrt sync tt1 do {xa1 := 0, trt1 := 0} goto l5;
	when trt1 < ttrt sync tt1 do {xa1 := 0, trt1 := 0} goto l6;

loc l5: invariant trt1 <= sa
	when trt1 = sa sync rt1 goto l0;
	
loc l6: invariant trt1 <= sa
	when trt1 = sa goto l7;

accepting loc l7: invariant xb1 <= ttrt + sa
	when True sync rt1 goto l0;


end (* station1 *)




(************************************************************)
  automaton station2
(************************************************************)

synclabs: tt2, rt2; 

loc l0: invariant True
	(* when trt2 >= ttrt sync tt2 do {trt2 := 0, xb2 := 0} goto l1;
	when trt2 < ttrt sync tt2 do {trt2 := 0, xb2 := 0} goto l2; *)

	when trt2 >= ttrt sync tt2 do {xb2 := trt2, trt2 := 0} goto l1;
	when trt2 < ttrt sync tt2 do {xb2 := trt2, trt2 := 0} goto l2;

loc l1: invariant trt2 <= sa
	when trt2 = sa sync rt2 goto l4;
	
loc l2: invariant trt2 <= sa
	when trt2 = sa goto l3;
	
loc l3: invariant xa2 <= ttrt + sa
	when True sync rt2 goto l4;
	
loc l4: invariant True
	when trt2 >= ttrt sync tt2 do {xa2 := 0, trt2 := 0} goto l5;
	when trt2 < ttrt sync tt2 do {xa2 := 0, trt2 := 0} goto l6;

loc l5: invariant trt2 <= sa
	when trt2 = sa sync rt2 goto l0;
	
loc l6: invariant trt2 <= sa
	when trt2 = sa goto l7;

accepting loc l7: invariant xb2 <= ttrt + sa
	when True sync rt2 goto l0;


end (* station2 *)



(************************************************************)
  automaton station3
(************************************************************)

synclabs: tt3, rt3; 

loc l0: invariant True
	(* when trt3 >= ttrt sync tt3 do {trt3 := 0, xb3 := 0} goto l1;
	when trt3 < ttrt sync tt3 do {trt3 := 0, xb3 := 0} goto l2; *)

	when trt3 >= ttrt sync tt3 do {xb3 := trt3, trt3 := 0} goto l1;
	when trt3 < ttrt sync tt3 do {xb3 := trt3, trt3 := 0} goto l2;

loc l1: invariant trt3 <= sa
	when trt3 = sa sync rt3 goto l4;
	
loc l2: invariant trt3 <= sa
	when trt3 = sa goto l3;
	
loc l3: invariant xa3 <= ttrt + sa
	when True sync rt3 goto l4;
	
loc l4: invariant True
	when trt3 >= ttrt sync tt3 do {xa3 := 0, trt3 := 0} goto l5;
	when trt3 < ttrt sync tt3 do {xa3 := 0, trt3 := 0} goto l6;

loc l5: invariant trt3 <= sa
	when trt3 = sa sync rt3 goto l0;
	
loc l6: invariant trt3 <= sa
	when trt3 = sa goto l7;

accepting loc l7: invariant xb3 <= ttrt + sa
	when True sync rt3 goto l0;


end (* station3 *)



(************************************************************)
  automaton station4
(************************************************************)

synclabs: tt4, rt4; 

loc l0: invariant True
	(* when trt4 >= ttrt sync tt4 do {trt4 := 0, xb4 := 0} goto l1;
	when trt4 < ttrt sync tt4 do {trt4 := 0, xb4 := 0} goto l2; *)

	when trt4 >= ttrt sync tt4 do {xb4 := trt4, trt4 := 0} goto l1;
	when trt4 < ttrt sync tt4 do {xb4 := trt4, trt4 := 0} goto l2;

loc l1: invariant trt4 <= sa
	when trt4 = sa sync rt4 goto l4;
	
loc l2: invariant trt4 <= sa
	when trt3 = sa goto l3;
	
loc l3: invariant xa4 <= ttrt + sa
	when True sync rt4 goto l4;
	
loc l4: invariant True
	when trt4 >= ttrt sync tt4 do {xa4 := 0, trt4 := 0} goto l5;
	when trt4 < ttrt sync tt4 do {xa4 := 0, trt4 := 0} goto l6;

loc l5: invariant trt4 <= sa
	when trt4 = sa sync rt4 goto l0;
	
loc l6: invariant trt4 <= sa
	when trt4 = sa goto l7;

accepting loc l7: invariant xb4 <= ttrt + sa
	when True sync rt4 goto l0;


end (* station4 *)








(************************************************************)
(* Initial state *)
(************************************************************)

init := True
	(*------------------------------------------------------------
	   INITIAL LOCATION
	  ------------------------------------------------------------*)
	& loc[ring] = l0
	
	& loc[station1] = l0
	& loc[station2] = l0
	& loc[station3] = l0
	& loc[station4] = l0
	(*------------------------------------------------------------
	   INITIAL CLOCKS
	  ------------------------------------------------------------*)
	& t = 0

	& trt1 = 0 
	& xa1 = 0 
	& xb1 = 0

	& trt2 = 0 
	& xa2 = 0 
	& xb2 = 0

	& trt3 = 0 
	& xa3 = 0 
	& xb3 = 0

	& trt4 = 0 
	& xa4 = 0 
	& xb4 = 0



	(*------------------------------------------------------------
	   INITIAL DISCRETE
	  ------------------------------------------------------------*)
	& id = 1


	(*------------------------------------------------------------
	   PARAMETER CONSTRAINTS
	  ------------------------------------------------------------*)
	& sa >= 0
	& td >= 0
;


(************************************************************)
(* The end *)
(************************************************************)
end
